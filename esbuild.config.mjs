import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { sassPlugin } from "esbuild-sass-plugin";
import dotenv from "dotenv";
import { existsSync } from "fs";

if (existsSync(".env")) dotenv.config();
const embeddedPublicKey =
	process.env.EMBEDDED_PUBLIC_KEY || "__EMBEDDED_PUBLIC_KEY__";
if (embeddedPublicKey === "__EMBEDDED_PUBLIC_KEY__") {
	console.warn("⚠️  EMBEDDED_PUBLIC_KEY not found in environment variables.");
	console.warn("   Create a .env file with EMBEDDED_PUBLIC_KEY.");
} else {
	console.log("✓ Using EMBEDDED_PUBLIC_KEY from environment variables");
}

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const mode = process.argv[2];

if (!["dev", "beta", "production"].includes(mode)) {
	throw new Error(`Invalid mode: ${mode}`);
}

console.log(`Building in ${mode} mode`);

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/styles.scss", "src/main.ts"],
	bundle: true,
	minify: mode === "production",
	define: {
		"process.env.EMBEDDED_PUBLIC_KEY": JSON.stringify(embeddedPublicKey),
	},
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: mode === "dev" ? "inline" : false,
	treeShaking: true,
	outdir: "dist",
	plugins: [sassPlugin()],
});

if (mode === "dev") {
	await context.watch();
} else {
	await context.rebuild();
	process.exit(0);
}
